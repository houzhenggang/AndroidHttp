package com.example.simpleandroidhttp.utils.httpmanager;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.FileNameMap;import java.net.HttpURLConnection;import java.net.MalformedURLException;import java.net.URL;import java.net.URLConnection;import java.net.URLEncoder;import java.util.Iterator;import java.util.LinkedList;import java.util.List;import java.util.Map;import java.util.Map.Entry;import java.util.Set;import org.apache.http.Consts;import org.apache.http.HttpEntity;import org.apache.http.HttpResponse;import org.apache.http.HttpStatus;import org.apache.http.client.CookieStore;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.cookie.Cookie;import org.apache.http.entity.ContentType;import org.apache.http.entity.mime.MultipartEntity;import org.apache.http.entity.mime.MultipartEntityBuilder;import org.apache.http.entity.mime.content.FileBody;import org.apache.http.entity.mime.content.StringBody;import org.apache.http.impl.client.AbstractHttpClient;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.message.BasicNameValuePair;import org.apache.http.params.CoreConnectionPNames;import org.apache.http.protocol.HTTP;import org.apache.http.util.EntityUtils;import com.example.simpleandroidhttp.SimpleAndroidHttpApplication;import com.example.simpleandroidhttp.utils.CookiesUtils;import com.example.simpleandroidhttp.utils.FileUtils;import com.example.simpleandroidhttp.utils.ZozoLog;import com.example.simpleandroidhttp.utils.json.JsonUtils;/** * 网络工具类 *  */public class HttpUtils {	private static final String TAG = "HttpUtil";	private final static String URL = "http://app.daishu.com/index.php";	private static final int REQUEST_TIMEOUT = 30 * 1000;// 设置请求超时10秒钟	private static final int SO_TIMEOUT = 30 * 1000; // 设置等待数据超时时间10秒钟	/**	 * 为url添加参数，目前只有get请求会用到	 * 	 * @param url	 *            原始url	 * @param params	 *            要加的参数	 * @return 加过参数的url	 * @throws Exception	 */	public static String generationHttpUrl(String url, Map<String, String> params) throws Exception {		StringBuilder urlBuilder = new StringBuilder();		urlBuilder.append(url);		if (null != params && params.size() != 0) {			urlBuilder.append("&");			Iterator<Entry<String, String>> iterator = params.entrySet().iterator();			while (iterator.hasNext()) {				Entry<String, String> param = iterator.next();				urlBuilder.append(URLEncoder.encode(param.getKey(), "UTF-8")).append('=').append(URLEncoder.encode(param.getValue(), "UTF-8"));				if (iterator.hasNext()) {					urlBuilder.append('&');				}			}		}		return urlBuilder.toString();	}	/**	 * get请求	 * 	 * @param url	 * @param params	 * @param cookies	 * @return	 * @throws Exception	 */	public static String getRequest(String url, Map<String, String> params, CookieStore cookies) throws Exception {		String httpUrl = generationHttpUrl(url, params);		ZozoLog.e(TAG, "httpUrl.tostring------>" + httpUrl.toString());		// 创建HttpClient对象		DefaultHttpClient client = new DefaultHttpClient();		client.setCookieStore(CookiesUtils.getCookies());		// 发送get请求创建HttpGet对象		HttpGet getMethod = new HttpGet(httpUrl);		// 请求超时		client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, REQUEST_TIMEOUT);		// 读取超时		client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, SO_TIMEOUT);		HttpResponse response = client.execute(getMethod);		// 获取状态码		int res = response.getStatusLine().getStatusCode();		if (res == HttpStatus.SC_OK) {			// 获取响应内容						SimpleAndroidHttpApplication.cookieStore.addCookies(client.getCookieStore().getCookies().toArray(new Cookie[0]));			CookiesUtils.saveCookies();						String result = EntityUtils.toString(response.getEntity(), "utf-8");			return JsonUtils.JSONTokener(result);		} else {			ZozoLog.e(TAG, "res--->" + res);		}		return "";	}	/**	 * HashMap 转换成 List<BasicNameValuePair> 目前只有post请求会用到	 * 	 * @param params	 *            map类型参数	 * @return List<BasicNameValuePair>类型参数	 */	public static List<BasicNameValuePair> MapToBasicNameValuePair(Map<String, String> params) {		if (params == null) {			return null;		}		List<BasicNameValuePair> dataList = new LinkedList<BasicNameValuePair>();		Iterator<Map.Entry<String, String>> i = params.entrySet().iterator();		while (i.hasNext()) {			Map.Entry<String, String> o = (Map.Entry<String, String>) i.next();			dataList.add(new BasicNameValuePair(o.getKey().toString(), o.getValue().toString()));		}		return dataList;	}	/**	 * 带cookie的post请求	 * 	 * @param params	 * @param deviceID	 * @return	 */	public static String postRequest(String url, Map<String, String> params, CookieStore cookies) throws Exception {		// 这里判断 传进来的cookie是否长度为1		// 如果为1 则用shared存起来的		// 如果不为1 就用自己的.		List<BasicNameValuePair> param = MapToBasicNameValuePair(params);		String s = param == null ? "" : param.toString();		ZozoLog.e(TAG, "url.tostring------>" + url.toString());		ZozoLog.e(TAG, "param.tostring------>" + s);		HttpPost postMethod = new HttpPost(url);		// 1. 创建HttpClient对象		DefaultHttpClient client = new DefaultHttpClient();		// 请求超时		client.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT, REQUEST_TIMEOUT);		// 读取超时		client.getParams().setParameter(CoreConnectionPNames.SO_TIMEOUT, SO_TIMEOUT);		if (null != params) {			ZozoLog.d(TAG, "params.......");			postMethod.setEntity(new UrlEncodedFormEntity(param, HTTP.UTF_8));			ZozoLog.d(TAG, "params.......22");		}		ZozoLog.i(TAG, "请求前的CookiesUtils.getCookies()--->" + CookiesUtils.getCookies().getCookies().toString());		client.setCookieStore(CookiesUtils.getCookies());		HttpResponse response = client.execute(postMethod);		int statueCode = response.getStatusLine().getStatusCode();		if (statueCode == HttpStatus.SC_OK) {			SimpleAndroidHttpApplication.cookieStore.addCookies(client.getCookieStore().getCookies().toArray(new Cookie[0]));			CookiesUtils.saveCookies();			ZozoLog.i(TAG, "请求后的CookiesUtils.getCookies()--->" + CookiesUtils.getCookies().getCookies().toString());			String result = EntityUtils.toString(response.getEntity(), "utf-8");			return JsonUtils.JSONTokener(result);		}		return "";	}	/**	 * 下载文件	 * 	 * @param urlstr	 *            文件下载的地址	 * @param path	 *            存放的路径	 * @param fileName	 *            要存放的文件名	 * @return 返回文件全路径	 */	public static String doDownloadFile(String urlstr, String path, String fileName) {		File resultFile = null;		// 获得路径加文件名		String fileFullNamme = FileUtils.makeFilePath(path, fileName);		if (FileUtils.isFileExist(fileFullNamme)) {			return fileFullNamme;		} else {			try {				InputStream input = null;				input = getInputStream(urlstr);				resultFile = FileUtils.writeSdcardFile(fileFullNamme, input, false);				if (resultFile == null) {					return null;				}			} catch (Exception e) {				ZozoLog.d(TAG, "doDownloadFile e = " + e);				e.printStackTrace();				return null;			}		}		return resultFile.getAbsolutePath();	}	/**	 * 从网络上获取文件流 由于得到一个InputStream对象是所有文件处理前必须的操作，所以将这个操作封装成了一个方法	 * 	 * @param urlStr	 *            文件下载的地址	 * @return 返回文件流	 * @throws IOException	 */	public static InputStream getInputStream(String urlStr) throws IOException {		InputStream is = null;		try {			URL url = new URL(urlStr);			HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();			is = urlConn.getInputStream();		} catch (MalformedURLException e) {			ZozoLog.d(TAG, "getInputStream e = " + e);			e.printStackTrace();		}		return is;	}	/**	 * post请求上传单张图片	 * 	 * @param param	 * @param file	 * @return	 * @throws Exception	 */	@SuppressWarnings("deprecation")	public static String doPost(String url, Map<String, String> mapParams, File file) throws Exception {				String s = mapParams == null ? "" : mapParams.toString();		ZozoLog.i(TAG, "url.tostring------>" + url.toString());		ZozoLog.i(TAG, "mapParams.tostring------>" + s.toString());		ZozoLog.i(TAG, "file.getAbsolutePath()------>" + file.getAbsolutePath());		MultipartEntity muEntity = new MultipartEntity();		if(mapParams != null && mapParams.isEmpty()  == false){			Set<String> set = mapParams.keySet();			for(String str : set){			muEntity.addPart(str,new StringBody(mapParams.get(str), ContentType.create("text/plain", Consts.UTF_8)));			}		}		DefaultHttpClient client = new DefaultHttpClient();		HttpPost post = new HttpPost(url);		client.setCookieStore(SimpleAndroidHttpApplication.cookieStore);		// 添加文件参数		FileNameMap fileNameMap = URLConnection.getFileNameMap();		String type = fileNameMap.getContentTypeFor(file.getAbsolutePath());		ZozoLog.i(TAG, " ==== upload ==== file.getAbsolutePath() :" + file.getAbsolutePath());		ZozoLog.i(TAG, " ==== upload ==== type :" + ContentType.create(type));				FileBody newFile = new FileBody(new File(file.getAbsolutePath()),ContentType.create(type),System.currentTimeMillis()+".jpeg");		ZozoLog.i(TAG, "upload 的 newFile ------>" + newFile.getMimeType());		ZozoLog.i(TAG, "upload 的 newFile ------>" + newFile.getFilename());		ZozoLog.i(TAG, "upload 的 newFile ------>" + newFile.getContentType());		ZozoLog.i(TAG, "upload 的 newFile ------>" + newFile.getTransferEncoding());		ZozoLog.i(TAG, "upload 的 newFile ------>" + newFile.getContentLength());		muEntity.addPart("img_file", newFile);		ZozoLog.i(TAG, "upload 的 httpEntity getContentLength------>" + muEntity.getContentLength());		ZozoLog.i(TAG, "upload 的 httpEntity getContentType ------>" + muEntity.getContentType());		post.setEntity(muEntity);		HttpResponse response = client.execute(post);		if (((AbstractHttpClient) client).getCookieStore().getCookies().size() > 1) {			SimpleAndroidHttpApplication.cookieStore.addCookies(client.getCookieStore().getCookies().toArray(new Cookie[0]));		}		int stateCode = response.getStatusLine().getStatusCode();		if (stateCode == HttpStatus.SC_OK) {			SimpleAndroidHttpApplication.cookieStore.addCookies(client.getCookieStore().getCookies().toArray(new Cookie[0]));			CookiesUtils.saveCookies();			StringBuffer sb = new StringBuffer();			HttpEntity results = response.getEntity();			if (results != null) {				InputStream is = results.getContent();				BufferedReader br = new BufferedReader(new InputStreamReader(is));				String tempLine;				while ((tempLine = br.readLine()) != null) {					sb.append(tempLine);				}			}			String result = sb.toString();			return JsonUtils.JSONTokener(result);		}		post.abort();		return "";	}	/**	 * post请求上传多张图片	 * 	 * @param params	 * @param files	 * @return	 * @throws IOException	 */	public static String doPost(Map<String, String> params, Map<String, File> files) throws IOException {		String BOUNDARY = java.util.UUID.randomUUID().toString();		String PREFIX = "--", LINEND = "\r\n";		String MULTIPART_FROM_DATA = "multipart/form-data";		String CHARSET = "UTF-8";		URL uri = new URL(URL);		HttpURLConnection conn = (HttpURLConnection) uri.openConnection();		conn.setReadTimeout(5 * 1000);		conn.setDoInput(true);		conn.setDoOutput(true);		conn.setUseCaches(false);		conn.setRequestMethod("POST");		conn.setRequestProperty("connection", "keep-alive");		conn.setRequestProperty("Charsert", "UTF-8");		conn.setRequestProperty("Content-Type", MULTIPART_FROM_DATA + ";boundary=" + BOUNDARY);		StringBuilder sb = new StringBuilder();		for (Map.Entry<String, String> entry : params.entrySet()) {			sb.append(PREFIX);			sb.append(BOUNDARY);			sb.append(LINEND);			sb.append("Content-Disposition: form-data; name=\"" + entry.getKey() + "\"" + LINEND);			sb.append("Content-Type: text/plain; charset=" + CHARSET + LINEND);			sb.append("Content-Transfer-Encoding: 8bit" + LINEND);			sb.append(LINEND);			sb.append(entry.getValue());			sb.append(LINEND);		}		DataOutputStream outStream = new DataOutputStream(conn.getOutputStream());		outStream.write(sb.toString().getBytes());		InputStream in = null;		if (files != null) {			for (Map.Entry<String, File> file : files.entrySet()) {				StringBuilder sb1 = new StringBuilder();				sb1.append(PREFIX);				sb1.append(BOUNDARY);				sb1.append(LINEND);				sb1.append("Content-Disposition: form-data; name=\"file[]\"; filename=\"" + file.getKey() + "\"" + LINEND);				sb1.append("Content-Type: application/octet-stream; charset=" + CHARSET + LINEND);				sb1.append(LINEND);				outStream.write(sb1.toString().getBytes());				InputStream is = new FileInputStream(file.getValue());				byte[] buffer = new byte[1024];				int len = 0;				while ((len = is.read(buffer)) != -1) {					outStream.write(buffer, 0, len);				}				is.close();				outStream.write(LINEND.getBytes());			}			byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINEND).getBytes();			outStream.write(end_data);			outStream.flush();			int res = conn.getResponseCode();			StringBuilder sb2 = new StringBuilder();			if (res == HttpStatus.SC_OK) {				in = conn.getInputStream();				int ch;				while ((ch = in.read()) != -1) {					sb2.append((char) ch);				}			}			outStream.close();			conn.disconnect();			return sb2.toString();		}		return null;	}}