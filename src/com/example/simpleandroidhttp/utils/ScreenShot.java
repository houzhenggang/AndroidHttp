package com.example.simpleandroidhttp.utils;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import android.app.Activity;import android.graphics.Bitmap;import android.graphics.Bitmap.Config;import android.graphics.Canvas;import android.graphics.Paint;import android.graphics.PorterDuff.Mode;import android.graphics.PorterDuffXfermode;import android.graphics.Rect;import android.graphics.RectF;import android.util.Log;import android.view.View;import android.view.View.MeasureSpec;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.ScrollView;public class ScreenShot {	// 获取指定Activity的截屏，保存到png文件	public static Bitmap takeScreenShot(Activity activity, String path) {		// View是你需要截图的View		View view = activity.getWindow().getDecorView();		view.setDrawingCacheEnabled(true);		view.buildDrawingCache();		Bitmap b1 = view.getDrawingCache();		// 获取状态栏高度		Rect frame = new Rect();		activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);		int statusBarHeight = frame.top;		System.out.println(statusBarHeight);		// 获取屏幕长和高		int width = activity.getWindowManager().getDefaultDisplay().getWidth();		int height = activity.getWindowManager().getDefaultDisplay().getHeight();		// 去掉标题栏		Bitmap b = Bitmap.createBitmap(b1, 0, statusBarHeight, width, height - statusBarHeight);		view.destroyDrawingCache();		savePic(b, path);		return b;	}	// 保存到sdcard	public static void savePic(Bitmap b, String strFileName) {		FileOutputStream fos = null;		try {			fos = new FileOutputStream(strFileName);			if (null != fos) {				b.compress(Bitmap.CompressFormat.PNG, 60, fos);				fos.flush();				fos.close();			}		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}	}	public static void savePicbyJPG(Bitmap b, String strFileName) {		FileOutputStream fos = null;		try {			fos = new FileOutputStream(strFileName);			if (null != fos) {//				ZozoLog.d("wen", "savePicbyJPG"+(b==null));				b.compress(Bitmap.CompressFormat.JPEG, 50, fos);				fos.flush();				fos.close();			}		} catch (FileNotFoundException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}	}	/**	 * 把View对象转换成bitmap	 * */	public static Bitmap convertViewToBitmap(View view) {		view.measure(MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED), MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED));		view.layout(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight());		view.buildDrawingCache();		Bitmap bitmap = view.getDrawingCache();		if (bitmap != null) {			Log.d("nullde1", "nullde1");		} else {			System.out.println("这nullnulllnulnlul");		}		return bitmap;	}	public static Bitmap getViewBitmap(View v) {		v.clearFocus();		v.setPressed(false);		boolean willNotCache = v.willNotCacheDrawing();		v.setWillNotCacheDrawing(false);		// Reset the drawing cache background color to fully transparent		// for the duration of this operation		int color = v.getDrawingCacheBackgroundColor();		v.setDrawingCacheBackgroundColor(0);		if (color != 0) {			v.destroyDrawingCache();		}		v.buildDrawingCache();		Bitmap cacheBitmap = v.getDrawingCache();		if (cacheBitmap == null) {			return null;		}		Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);		// Restore the view		v.destroyDrawingCache();		v.setWillNotCacheDrawing(willNotCache);		v.setDrawingCacheBackgroundColor(color);		return bitmap;	}	/**	 * 截取scrollview的屏幕	 * **/	public static Bitmap getBitmapByView(ScrollView scrollView) {		int h = 0;		Bitmap bitmap = null;		// 获取listView实际高度		for (int i = 0; i < scrollView.getChildCount(); i++) {			h += scrollView.getChildAt(i).getHeight();		}		// 创建对应大小的bitmap		bitmap = Bitmap.createBitmap(scrollView.getWidth(), h, Bitmap.Config.RGB_565);		final Canvas canvas = new Canvas(bitmap);		scrollView.draw(canvas);		return bitmap;	}	/**	 * 截取RelativeLayout的屏幕	 * **/	public static Bitmap getBitmapByView(RelativeLayout layot) {		int h = 0;		Bitmap bitmap = null;		// 获取listView实际高度		for (int i = 0; i < layot.getChildCount(); i++) {			h += layot.getChildAt(i).getHeight();		}		// 创建对应大小的bitmap		bitmap = Bitmap.createBitmap(layot.getWidth(), h, Bitmap.Config.RGB_565);		final Canvas canvas = new Canvas(bitmap);		layot.draw(canvas);		return bitmap;	}	/**	 * 截图listview	 * **/	public static Bitmap getbBitmap(ListView listView) {		int h = 0;		Bitmap bitmap = null;		// 获取listView实际高度		for (int i = 0; i < listView.getChildCount(); i++) {			h += listView.getChildAt(i).getHeight();		}		// 创建对应大小的bitmap		bitmap = Bitmap.createBitmap(listView.getWidth(), h, Bitmap.Config.RGB_565);		final Canvas canvas = new Canvas(bitmap);		listView.draw(canvas);		return bitmap;	}	/**	 * 转换图片成圆形	 * 	 * @param bitmap	 *            传入Bitmap对象	 * @return	 */	public static Bitmap toRoundBitmap(Bitmap bitmap) {		int width = bitmap.getWidth();		int height = bitmap.getHeight();		float roundPx;		float left, top, right, bottom, dst_left, dst_top, dst_right, dst_bottom;		if (width <= height) {			roundPx = width / 2;			top = 0;			bottom = width;			left = 0;			right = width;			height = width;			dst_left = 0;			dst_top = 0;			dst_right = width;			dst_bottom = width;		} else {			roundPx = height / 2;			float clip = (width - height) / 2;			left = clip;			right = width - clip;			top = 0;			bottom = height;			width = height;			dst_left = 0;			dst_top = 0;			dst_right = height;			dst_bottom = height;		}		Bitmap output = Bitmap.createBitmap(width, height, Config.ARGB_8888);		Canvas canvas = new Canvas(output);		final int color = 0xff424242;		final Paint paint = new Paint();		final Rect src = new Rect((int) left, (int) top, (int) right, (int) bottom);		final Rect dst = new Rect((int) dst_left, (int) dst_top, (int) dst_right, (int) dst_bottom);		final RectF rectF = new RectF(dst);		paint.setAntiAlias(true);		canvas.drawARGB(0, 0, 0, 0);		paint.setColor(color);		canvas.drawRoundRect(rectF, roundPx, roundPx, paint);		paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));		canvas.drawBitmap(bitmap, src, dst, paint);		return output;	}}